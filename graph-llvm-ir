#!/usr/bin/env python
import sys
import optparse

import llvmlite.ir as ll
import llvmlite.binding as llvm
llvm.initialize()
llvm.initialize_native_target()
llvm.initialize_native_asmprinter()

tmp_i = 1


def number_tmps(mod):
    """This function establishes explicit names for nameless numeric
    temporaries in IR. It also should give human-readable IDs to each
    statement in IR. Actually, as this is SSA, it uses result temporary
    name as an ID for statement. And fails here, because void-typed
    statements do not allow to set temporary name. So, this needs rework,
    and so far worked around during graph construction.
    """
    global tmp_i
    for f in mod.functions:
        for b in f.blocks:
            for i in b.instructions:
                if ((not i.name) and (str(i.type) != "void")):
                    i.name = "t%d" % tmp_i
                    tmp_i += 1


class Graph:

    def __init__(self, f, out):
        self.f = f
        self.out = out
        self.edges = []
        self.anon_bblock_cnt = 0
        self.anon_bblock_names = {}
        self.void_instr_cnt = 0
        self.void_instr_names = {}

    def write(self, line=""):
        self.out.write(line + "\n")

    def start_graph(self):
        self.write("digraph G {")
        self.write("compound=true")
        self.write(
            'label="Black edges - dataflow, red edges - control flow, blue nodes - basic block identifiers"')
        self.write('labelloc=top')

    def edge(self, fro, to, extra=""):
        self.edges.append("\"%s\" -> \"%s\"%s" % (fro, to, extra))

    def block_name(self, b):
        """Returns basic block name, i.e. its entry label, or made name
        if label if absent."""
        if b.name:
            return b.name
        if b in self.anon_bblock_names:
            return self.anon_bblock_names[b]
        self.anon_bblock_cnt += 1
        n = "unk_block_%d" % self.anon_bblock_cnt
        self.anon_bblock_names[b] = n
        return n

    def instr_name(self, i):
        """Returns instruction name, for which result variable name is used.
        If result variable name is absent (void statement), make up name.
        """
        if i in self.void_instr_names:
            return self.void_instr_names[i]
        n = i.name
        if not n:
            self.void_instr_cnt += 1
            n = "_%d" % self.void_instr_cnt
            self.void_instr_names[i] = n
        return n

    def render(self):
        self.start_graph()
        lab = 1
        for b in self.f.blocks:
            block_name = self.block_name(b)
            self.edges = []
            self.write(
                '\"%s\" [style=filled fillcolor=blue fontcolor=white]' % (block_name))

            # Create block entry label node and edge from it to first IR instruction
            attr = "[color=blue]"
            if b.name == "entry":
                attr += "[weight=5]"

            insns = list(b.instructions)
            if insns[0].name == "":
                n = self.instr_name(insns[0])
                self.edge(block_name, n, attr)
            else:
                self.edge(block_name, insns[0].name, attr)

            last_inst_name = None
            for i in b.instructions:
                n = self.instr_name(i)
                self.write('\"%s\" [label="%s"]' % (n, i))
                if last_inst_name:
                    self.edge(last_inst_name, n, "[color=red weight=2]")

                for a in i.operands:
                    if isinstance(a, ll.Constant) and not a.name:
                        arg_val = a
                    else:
                        arg_val = a.name
                    if i.opcode == "br" and str(a.type) == str(ll.LabelType()):
                        # For jump targets, we jump from current node to label (arg)
                        target_block = next(
                            (x for x in list(self.f.blocks) if x.name == a.name), None)
                        if(target_block != None):
                            target = list(target_block.instructions)[0]
                            if(target.name == ""):
                                arg_val = self.instr_name(target)
                            else:
                                arg_val = target.name
                            attrs = "[color=red]"
                            self.edge(n, arg_val, attrs)
                    else:
                        # For data, flow is from operand to operation
                        self.edge(arg_val, n)
                last_inst_name = n
            for e in self.edges:
                self.write(e)
            self.write()
        self.write("}")


if __name__ == "__main__":

    if len(sys.argv) != 2:
        print("Wrong number of arguments. Please provide an input file")
        exit(0)

    with open(sys.argv[1]) as asm:
        mod = llvm.parse_assembly(asm.read())
        print("Parsing complete")

    number_tmps(mod)

    for f in mod.functions:
        if not f.is_declaration:
            print("Writing %s.dot" % f.name)
            with open(f.name + ".dot", "w") as out:
                g = Graph(f, out)
                g.render()
